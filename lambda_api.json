{
     "AWSTemplateFormatVersion": "2010-09-09",
     "Transform": "AWS::Serverless-2016-10-31",
     "Description": "An AWS Serverless Application Model template describing your function.",
     "Resources": {
          "ddbreaderapi": {
               "Type": "AWS::Serverless::Function",
               "Properties": {
                    "CodeUri": ".",
                    "Description": "",
                    "MemorySize": 128,
                    "Timeout": 3,
                    "Handler": "lambda_function.lambda_handler",
                    "Runtime": "python3.12",
                    "Architectures": ["x86_64"],
                    "EphemeralStorage": {
                         "Size": 512
                    },
                    "EventInvokeConfig": {
                         "MaximumEventAgeInSeconds": 21600,
                         "MaximumRetryAttempts": 2
                    },
                    "PackageType": "Zip",
                    "Policies": [
                         {
                              "Statement": [
                                   {
                                        "Effect": "Allow",
                                        "Action": ["apigateway:*"],
                                        "Resource": "arn:aws:apigateway:*::/*"
                                   },
                                   {
                                        "Effect": "Allow",
                                        "Action": [
                                             "ssm:DescribeAssociation",
                                             "ssm:GetDeployablePatchSnapshotForInstance",
                                             "ssm:GetDocument",
                                             "ssm:DescribeDocument",
                                             "ssm:GetManifest",
                                             "ssm:GetParameter",
                                             "ssm:GetParameters",
                                             "ssm:ListAssociations",
                                             "ssm:ListInstanceAssociations",
                                             "ssm:PutInventory",
                                             "ssm:PutComplianceItems",
                                             "ssm:PutConfigurePackageResult",
                                             "ssm:UpdateAssociationStatus",
                                             "ssm:UpdateInstanceAssociationStatus",
                                             "ssm:UpdateInstanceInformation"
                                        ],
                                        "Resource": "*"
                                   },
                                   {
                                        "Effect": "Allow",
                                        "Action": ["ssmmessages:CreateControlChannel", "ssmmessages:CreateDataChannel", "ssmmessages:OpenControlChannel", "ssmmessages:OpenDataChannel"],
                                        "Resource": "*"
                                   },
                                   {
                                        "Effect": "Allow",
                                        "Action": ["ec2messages:AcknowledgeMessage", "ec2messages:DeleteMessage", "ec2messages:FailMessage", "ec2messages:GetEndpoint", "ec2messages:GetMessages", "ec2messages:SendReply"],
                                        "Resource": "*"
                                   },
                                   {
                                        "Effect": "Allow",
                                        "Action": [
                                             "ecr:GetAuthorizationToken",
                                             "ecr:BatchCheckLayerAvailability",
                                             "ecr:GetDownloadUrlForLayer",
                                             "ecr:GetRepositoryPolicy",
                                             "ecr:DescribeRepositories",
                                             "ecr:ListImages",
                                             "ecr:DescribeImages",
                                             "ecr:BatchGetImage",
                                             "ecr:GetLifecyclePolicy",
                                             "ecr:GetLifecyclePolicyPreview",
                                             "ecr:ListTagsForResource",
                                             "ecr:DescribeImageScanFindings"
                                        ],
                                        "Resource": "*"
                                   },
                                   {
                                        "Effect": "Allow",
                                        "Action": ["execute-api:Invoke", "execute-api:ManageConnections"],
                                        "Resource": "arn:aws:execute-api:*:*:*"
                                   },
                                   {
                                        "Action": [
                                             "dynamodb:*",
                                             "dax:*",
                                             "application-autoscaling:DeleteScalingPolicy",
                                             "application-autoscaling:DeregisterScalableTarget",
                                             "application-autoscaling:DescribeScalableTargets",
                                             "application-autoscaling:DescribeScalingActivities",
                                             "application-autoscaling:DescribeScalingPolicies",
                                             "application-autoscaling:PutScalingPolicy",
                                             "application-autoscaling:RegisterScalableTarget",
                                             "cloudwatch:DeleteAlarms",
                                             "cloudwatch:DescribeAlarmHistory",
                                             "cloudwatch:DescribeAlarms",
                                             "cloudwatch:DescribeAlarmsForMetric",
                                             "cloudwatch:GetMetricStatistics",
                                             "cloudwatch:ListMetrics",
                                             "cloudwatch:PutMetricAlarm",
                                             "cloudwatch:GetMetricData",
                                             "datapipeline:ActivatePipeline",
                                             "datapipeline:CreatePipeline",
                                             "datapipeline:DeletePipeline",
                                             "datapipeline:DescribeObjects",
                                             "datapipeline:DescribePipelines",
                                             "datapipeline:GetPipelineDefinition",
                                             "datapipeline:ListPipelines",
                                             "datapipeline:PutPipelineDefinition",
                                             "datapipeline:QueryObjects",
                                             "ec2:DescribeVpcs",
                                             "ec2:DescribeSubnets",
                                             "ec2:DescribeSecurityGroups",
                                             "iam:GetRole",
                                             "iam:ListRoles",
                                             "kms:DescribeKey",
                                             "kms:ListAliases",
                                             "sns:CreateTopic",
                                             "sns:DeleteTopic",
                                             "sns:ListSubscriptions",
                                             "sns:ListSubscriptionsByTopic",
                                             "sns:ListTopics",
                                             "sns:Subscribe",
                                             "sns:Unsubscribe",
                                             "sns:SetTopicAttributes",
                                             "lambda:CreateFunction",
                                             "lambda:ListFunctions",
                                             "lambda:ListEventSourceMappings",
                                             "lambda:CreateEventSourceMapping",
                                             "lambda:DeleteEventSourceMapping",
                                             "lambda:GetFunctionConfiguration",
                                             "lambda:DeleteFunction",
                                             "resource-groups:ListGroups",
                                             "resource-groups:ListGroupResources",
                                             "resource-groups:GetGroup",
                                             "resource-groups:GetGroupQuery",
                                             "resource-groups:DeleteGroup",
                                             "resource-groups:CreateGroup",
                                             "tag:GetResources",
                                             "kinesis:ListStreams",
                                             "kinesis:DescribeStream",
                                             "kinesis:DescribeStreamSummary"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": "*"
                                   },
                                   {
                                        "Action": ["cloudwatch:GetInsightRuleReport"],
                                        "Effect": "Allow",
                                        "Resource": "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
                                   },
                                   {
                                        "Action": ["iam:PassRole"],
                                        "Effect": "Allow",
                                        "Resource": "*",
                                        "Condition": {
                                             "StringLike": {
                                                  "iam:PassedToService": ["application-autoscaling.amazonaws.com", "application-autoscaling.amazonaws.com.cn", "dax.amazonaws.com"]
                                             }
                                        }
                                   },
                                   {
                                        "Effect": "Allow",
                                        "Action": ["iam:CreateServiceLinkedRole"],
                                        "Resource": "*",
                                        "Condition": {
                                             "StringEquals": {
                                                  "iam:AWSServiceName": [
                                                       "replication.dynamodb.amazonaws.com",
                                                       "dax.amazonaws.com",
                                                       "dynamodb.application-autoscaling.amazonaws.com",
                                                       "contributorinsights.dynamodb.amazonaws.com",
                                                       "kinesisreplication.dynamodb.amazonaws.com"
                                                  ]
                                             }
                                        }
                                   },
                                   {
                                        "Condition": {
                                             "ForAnyValue:StringNotLike": {
                                                  "ec2:InstanceType": ["*.nano", "*.micro", "*.small", "*.medium"]
                                             }
                                        },
                                        "Action": ["ec2:RunInstances", "ec2:StartInstances"],
                                        "Resource": "arn:aws:ec2:*:*:instance/*",
                                        "Effect": "Deny",
                                        "Sid": "Ec2RestrictInstanceTypes"
                                   },
                                   {
                                        "Condition": {
                                             "StringNotEqualsIgnoreCaseIfExists": {
                                                  "ec2:Owner": "amazon"
                                             }
                                        },
                                        "Action": ["ec2:RunInstances"],
                                        "Resource": ["arn:aws:ec2:*:*:image/*"],
                                        "Effect": "Deny",
                                        "Sid": "Ec2RestrictNonAWSAMIs"
                                   },
                                   {
                                        "Condition": {
                                             "NumericGreaterThanIfExists": {
                                                  "ec2:VolumeSize": "35"
                                             }
                                        },
                                        "Action": ["ec2:RunInstances", "ec2:CreateVolume"],
                                        "Resource": "arn:aws:ec2:*:*:volume/*",
                                        "Effect": "Deny",
                                        "Sid": "Ec2RestrictLargeVolumes"
                                   },
                                   {
                                        "Condition": {
                                             "StringNotLikeIfExists": {
                                                  "ec2:VolumeType": ["gp2", "standard"]
                                             }
                                        },
                                        "Action": ["ec2:RunInstances", "ec2:CreateVolume"],
                                        "Resource": "arn:aws:ec2:*:*:volume/*",
                                        "Effect": "Deny",
                                        "Sid": "Ec2RestrictPIOPSVolumes"
                                   },
                                   {
                                        "Condition": {
                                             "NumericLessThanIfExists": {
                                                  "rds:StorageSize": "101"
                                             },
                                             "ForAnyValue:StringLikeIfExists": {
                                                  "rds:DatabaseClass": ["*.nano", "*.micro", "*.small", "*.medium"],
                                                  "rds:DatabaseEngine": ["aurora-mysql", "aurora-postgresql", "mysql", "postgres", "mariadb"]
                                             },
                                             "BoolIfExists": {
                                                  "rds:MultiAz": ["false"]
                                             }
                                        },
                                        "Action": ["rds:*"],
                                        "Resource": "*",
                                        "Effect": "Allow",
                                        "Sid": "RDSAllowAccessWithRestrictions"
                                   },
                                   {
                                        "Condition": {
                                             "NumericNotEqualsIfExists": {
                                                  "rds:Piops": "0"
                                             }
                                        },
                                        "Action": [
                                             "rds:CreateGlobalCluster",
                                             "rds:CreateDBInstanceReadReplica",
                                             "rds:StartDB*",
                                             "rds:ModifyDBCluster",
                                             "rds:ModifyCurrentDBClusterCapacity",
                                             "rds:ModifyDBClusterEndpoint",
                                             "rds:ModifyDBInstance",
                                             "rds:ModifyGlobalCluster",
                                             "rds:RestoreDB*",
                                             "rds:RebootDBInstance"
                                        ],
                                        "Resource": "*",
                                        "Effect": "Deny",
                                        "Sid": "RDSRestrictPiops"
                                   },
                                   {
                                        "Condition": {
                                             "StringLikeIfExists": {
                                                  "iam:AWSServiceName": ["*.amazonaws.com"]
                                             }
                                        },
                                        "Action": ["iam:AttachRolePolicy", "iam:DetachRolePolicy", "iam:PassRole", "iam:PutRolePolicy", "iam:UpdateAssumeRolePolicy", "iam:UpdateRole"],
                                        "Resource": "*",
                                        "Effect": "Allow",
                                        "Sid": "ServiceLinkedRoleAndPolicies"
                                   },
                                   {
                                        "Action": ["iam:CreateServiceLinkedRole"],
                                        "Resource": "arn:aws:iam::*:role/aws-service-role/*",
                                        "Effect": "Allow",
                                        "Sid": "IamAllowServiceLinkedRoleCreation"
                                   },
                                   {
                                        "Condition": {
                                             "StringEquals": {
                                                  "aws:RequestedRegion": ["us-east-1"]
                                             }
                                        },
                                        "Action": [
                                             "autoscaling:*",
                                             "cloud9:*",
                                             "cloudformation:*",
                                             "cloudfront:*",
                                             "cloudshell:*",
                                             "cloudtrail:*",
                                             "cloudwatch:*",
                                             "compute-optimizer:Get*",
                                             "compute-optimizer:Describe*",
                                             "dynamodb:*",
                                             "ec2:*",
                                             "ec2-instance-connect:Send*",
                                             "elasticbeanstalk:*",
                                             "elasticloadbalancing:*",
                                             "events:*",
                                             "glacier:*",
                                             "iam:Describe*",
                                             "iam:Get*",
                                             "iam:List*",
                                             "iam:*LoginProfile",
                                             "iam:RemoveUserFromGroup",
                                             "kms:ListAliases",
                                             "lambda:*",
                                             "logs:*",
                                             "rds:*Tags*",
                                             "rds:CreateDBCluster",
                                             "rds:CreateDBParameterGroup",
                                             "rds:CreateDBSubnetGroup",
                                             "rds:DeleteDBCluster",
                                             "rds:DeleteDBSubnetGroup",
                                             "rds:ModifyDBCluster",
                                             "rds:ModifyDBSubnetGroup",
                                             "rds:Describe*",
                                             "resource-groups:*",
                                             "route53:*",
                                             "s3:*",
                                             "sns:*",
                                             "ssm:*",
                                             "tag:*"
                                        ],
                                        "Resource": "*",
                                        "Effect": "Allow",
                                        "Sid": "AllowAllActions"
                                   },
                                   {
                                        "Action": [
                                             "dynamodb:*Reserved*",
                                             "ebs:FastSnapshotRestore",
                                             "ec2:*Fpga*",
                                             "ec2:*Spot*",
                                             "ec2:*ReservedInstances*",
                                             "ec2:*Scheduled*",
                                             "ec2:*Purchase*",
                                             "ec2:EnableFastSnapshotRestores",
                                             "ec2:GetHostReservationPurchasePreview",
                                             "ec2:RunScheduledInstances",
                                             "glacier:*VaultLock",
                                             "rds:Purchase*",
                                             "rds:*Reserved*",
                                             "route53domains:RegisterDomain",
                                             "s3:*ObjectLegalHold",
                                             "s3:*ObjectRetention",
                                             "s3:*BucketObjectLock*"
                                        ],
                                        "Resource": "*",
                                        "Effect": "Deny",
                                        "Sid": "AllServicesDenyNoConds"
                                   },
                                   {
                                        "Condition": {
                                             "ForAnyValue:StringNotLike": {
                                                  "autoscaling:InstanceType": ["t2.nano", "t2.micro", "t2.small", "t3.nano", "t3.micro", "t3.small"]
                                             }
                                        },
                                        "Action": ["autoscaling:CreateLaunchConfiguration"],
                                        "Resource": "*",
                                        "Effect": "Deny",
                                        "Sid": "AsgRestrict"
                                   },
                                   {
                                        "Condition": {
                                             "ForAnyValue:StringNotLikeIfExists": {
                                                  "cloud9:InstanceType": ["*.nano", "*.micro", "*.small"]
                                             }
                                        },
                                        "Action": ["cloud9:UpdateEnvironment*", "cloud9:CreateEnvironment*"],
                                        "Resource": "*",
                                        "Effect": "Deny",
                                        "Sid": "Cloud9Restrict"
                                   },
                                   {
                                        "Condition": {
                                             "StringEquals": {
                                                  "ec2:PlacementGroupStrategy": "cluster"
                                             }
                                        },
                                        "Action": ["ec2:*Instance*"],
                                        "Resource": "*",
                                        "Effect": "Deny",
                                        "Sid": "Ec2RestrictPlacementGroup"
                                   },
                                   {
                                        "Condition": {
                                             "StringNotLike": {
                                                  "ec2:Tenancy": "default"
                                             }
                                        },
                                        "Action": ["ec2:*Instance*"],
                                        "Resource": "arn:aws:ec2:*:*:instance/*",
                                        "Effect": "Deny",
                                        "Sid": "Ec2DenyTenancy"
                                   }
                              ]
                         },
                         {
                              "Statement": [
                                   {
                                        "Effect": "Allow",
                                        "Action": ["execute-api:Invoke"],
                                        "Resource": [
                                             {
                                                  "Fn::Sub": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/${Api.Stage}/*"
                                             }
                                        ]
                                   }
                              ]
                         }
                    ],
                    "SnapStart": {
                         "ApplyOn": "None"
                    },
                    "RuntimeManagementConfig": {
                         "UpdateRuntimeOn": "Auto"
                    },
                    "Environment": {
                         "Variables": {
                              "API_API_URL": {
                                   "Fn::Sub": "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Api.Stage}"
                              }
                         }
                    }
               }
          },
          "Api": {
               "Type": "AWS::Serverless::Api",
               "Properties": {
                    "Name": {
                         "Fn::Sub": [
                              "${ResourceName} From Stack ${AWS::StackName}",
                              {
                                   "ResourceName": "Api"
                              }
                         ]
                    },
                    "StageName": "Prod",
                    "DefinitionBody": {
                         "openapi": "3.0",
                         "info": {},
                         "paths": {
                              "/": {
                                   "get": {
                                        "responses": {}
                                   }
                              }
                         }
                    },
                    "EndpointConfiguration": "REGIONAL",
                    "TracingEnabled": true
               }
          }
     }
}
